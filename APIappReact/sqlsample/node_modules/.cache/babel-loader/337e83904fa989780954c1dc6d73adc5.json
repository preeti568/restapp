{"ast":null,"code":"'use strict';\n\nconst debug = require('debug')('mssql:base');\n\nconst {\n  EventEmitter\n} = require('events');\n\nconst {\n  IDS,\n  objectHasProperty\n} = require('../utils');\n\nconst globalConnection = require('../global-connection');\n\nconst {\n  TransactionError,\n  PreparedStatementError\n} = require('../error');\n\nconst shared = require('../shared');\n\nconst {\n  TYPES,\n  declare\n} = require('../datatypes');\n/**\r\n * Class PreparedStatement.\r\n *\r\n * IMPORTANT: Rememeber that each prepared statement means one reserved connection from the pool. Don't forget to unprepare a prepared statement!\r\n *\r\n * @property {String} statement Prepared SQL statement.\r\n */\n\n\nclass PreparedStatement extends EventEmitter {\n  /**\r\n   * Creates a new Prepared Statement.\r\n   *\r\n   * @param {ConnectionPool|Transaction} [holder]\r\n   */\n  constructor(parent) {\n    super();\n    IDS.add(this, 'PreparedStatement');\n    debug('ps(%d): created', IDS.get(this));\n    this.parent = parent || globalConnection.pool;\n    this._handle = 0;\n    this.prepared = false;\n    this.parameters = {};\n  }\n\n  get connected() {\n    return this.parent.connected;\n  }\n  /**\r\n   * Acquire connection from connection pool.\r\n   *\r\n   * @param {Request} request Request.\r\n   * @param {ConnectionPool~acquireCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\r\n   * @return {PreparedStatement|Promise}\r\n   */\n\n\n  acquire(request, callback) {\n    if (!this._acquiredConnection) {\n      setImmediate(callback, new PreparedStatementError('Statement is not prepared. Call prepare() first.', 'ENOTPREPARED'));\n      return this;\n    }\n\n    if (this._activeRequest) {\n      setImmediate(callback, new TransactionError(\"Can't acquire connection for the request. There is another request in progress.\", 'EREQINPROG'));\n      return this;\n    }\n\n    this._activeRequest = request;\n    setImmediate(callback, null, this._acquiredConnection, this._acquiredConfig);\n    return this;\n  }\n  /**\r\n   * Release connection back to the pool.\r\n   *\r\n   * @param {Connection} connection Previously acquired connection.\r\n   * @return {PreparedStatement}\r\n   */\n\n\n  release(connection) {\n    if (connection === this._acquiredConnection) {\n      this._activeRequest = null;\n    }\n\n    return this;\n  }\n  /**\r\n   * Add an input parameter to the prepared statement.\r\n   *\r\n   * @param {String} name Name of the input parameter without @ char.\r\n   * @param {*} type SQL data type of input parameter.\r\n   * @return {PreparedStatement}\r\n   */\n\n\n  input(name, type) {\n    if (/(--| |\\/\\*|\\*\\/|')/.test(name)) {\n      throw new PreparedStatementError(`SQL injection warning for param '${name}'`, 'EINJECT');\n    }\n\n    if (arguments.length < 2) {\n      throw new PreparedStatementError('Invalid number of arguments. 2 arguments expected.', 'EARGS');\n    }\n\n    if (type instanceof Function) {\n      type = type();\n    }\n\n    if (objectHasProperty(this.parameters, name)) {\n      throw new PreparedStatementError(`The parameter name ${name} has already been declared. Parameter names must be unique`, 'EDUPEPARAM');\n    }\n\n    this.parameters[name] = {\n      name,\n      type: type.type,\n      io: 1,\n      length: type.length,\n      scale: type.scale,\n      precision: type.precision,\n      tvpType: type.tvpType\n    };\n    return this;\n  }\n  /**\r\n   * Replace an input parameter on the request.\r\n   *\r\n   * @param {String} name Name of the input parameter without @ char.\r\n   * @param {*} [type] SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\r\n   * @param {*} value Input parameter value. `undefined` and `NaN` values are automatically converted to `null` values.\r\n   * @return {Request}\r\n   */\n\n\n  replaceInput(name, type, value) {\n    delete this.parameters[name];\n    return this.input(name, type, value);\n  }\n  /**\r\n   * Add an output parameter to the prepared statement.\r\n   *\r\n   * @param {String} name Name of the output parameter without @ char.\r\n   * @param {*} type SQL data type of output parameter.\r\n   * @return {PreparedStatement}\r\n   */\n\n\n  output(name, type) {\n    if (/(--| |\\/\\*|\\*\\/|')/.test(name)) {\n      throw new PreparedStatementError(`SQL injection warning for param '${name}'`, 'EINJECT');\n    }\n\n    if (arguments.length < 2) {\n      throw new PreparedStatementError('Invalid number of arguments. 2 arguments expected.', 'EARGS');\n    }\n\n    if (type instanceof Function) type = type();\n\n    if (objectHasProperty(this.parameters, name)) {\n      throw new PreparedStatementError(`The parameter name ${name} has already been declared. Parameter names must be unique`, 'EDUPEPARAM');\n    }\n\n    this.parameters[name] = {\n      name,\n      type: type.type,\n      io: 2,\n      length: type.length,\n      scale: type.scale,\n      precision: type.precision\n    };\n    return this;\n  }\n  /**\r\n   * Replace an output parameter on the request.\r\n   *\r\n   * @param {String} name Name of the output parameter without @ char.\r\n   * @param {*} type SQL data type of output parameter.\r\n   * @return {PreparedStatement}\r\n   */\n\n\n  replaceOutput(name, type) {\n    delete this.parameters[name];\n    return this.output(name, type);\n  }\n  /**\r\n   * Prepare a statement.\r\n   *\r\n   * @param {String} statement SQL statement to prepare.\r\n   * @param {basicCallback} [callback] A callback which is called after preparation has completed, or an error has occurred. If omited, method returns Promise.\r\n   * @return {PreparedStatement|Promise}\r\n   */\n\n\n  prepare(statement, callback) {\n    if (typeof callback === 'function') {\n      this._prepare(statement, callback);\n\n      return this;\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._prepare(statement, err => {\n        if (err) return reject(err);\n        resolve(this);\n      });\n    });\n  }\n  /**\r\n   * @private\r\n   * @param {String} statement\r\n   * @param {basicCallback} callback\r\n   */\n\n\n  _prepare(statement, callback) {\n    debug('ps(%d): prepare', IDS.get(this));\n\n    if (typeof statement === 'function') {\n      callback = statement;\n      statement = undefined;\n    }\n\n    if (this.prepared) {\n      return setImmediate(callback, new PreparedStatementError('Statement is already prepared.', 'EALREADYPREPARED'));\n    }\n\n    this.statement = statement || this.statement;\n    this.parent.acquire(this, (err, connection, config) => {\n      if (err) return callback(err);\n      this._acquiredConnection = connection;\n      this._acquiredConfig = config;\n      const req = new shared.driver.Request(this);\n      req.stream = false;\n      req.output('handle', TYPES.Int);\n      req.input('params', TYPES.NVarChar, (() => {\n        const result = [];\n\n        for (const name in this.parameters) {\n          if (!objectHasProperty(this.parameters, name)) {\n            continue;\n          }\n\n          const param = this.parameters[name];\n          result.push(`@${name} ${declare(param.type, param)}${param.io === 2 ? ' output' : ''}`);\n        }\n\n        return result;\n      })().join(','));\n      req.input('stmt', TYPES.NVarChar, this.statement);\n      req.execute('sp_prepare', (err, result) => {\n        if (err) {\n          this.parent.release(this._acquiredConnection);\n          this._acquiredConnection = null;\n          this._acquiredConfig = null;\n          return callback(err);\n        }\n\n        debug('ps(%d): prepared', IDS.get(this));\n        this._handle = result.output.handle;\n        this.prepared = true;\n        callback(null);\n      });\n    });\n  }\n  /**\r\n   * Execute a prepared statement.\r\n   *\r\n   * @param {Object} values An object whose names correspond to the names of parameters that were added to the prepared statement before it was prepared.\r\n   * @param {basicCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\r\n   * @return {Request|Promise}\r\n   */\n\n\n  execute(values, callback) {\n    if (this.stream || typeof callback === 'function') {\n      return this._execute(values, callback);\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._execute(values, (err, recordset) => {\n        if (err) return reject(err);\n        resolve(recordset);\n      });\n    });\n  }\n  /**\r\n   * @private\r\n   * @param {Object} values\r\n   * @param {basicCallback} callback\r\n   */\n\n\n  _execute(values, callback) {\n    const req = new shared.driver.Request(this);\n    req.stream = this.stream;\n    req.input('handle', TYPES.Int, this._handle); // copy parameters with new values\n\n    for (const name in this.parameters) {\n      if (!objectHasProperty(this.parameters, name)) {\n        continue;\n      }\n\n      const param = this.parameters[name];\n      req.parameters[name] = {\n        name,\n        type: param.type,\n        io: param.io,\n        value: values[name],\n        length: param.length,\n        scale: param.scale,\n        precision: param.precision\n      };\n    }\n\n    req.execute('sp_execute', (err, result) => {\n      if (err) return callback(err);\n      callback(null, result);\n    });\n    return req;\n  }\n  /**\r\n   * Unprepare a prepared statement.\r\n   *\r\n   * @param {basicCallback} [callback] A callback which is called after unpreparation has completed, or an error has occurred. If omited, method returns Promise.\r\n   * @return {PreparedStatement|Promise}\r\n   */\n\n\n  unprepare(callback) {\n    if (typeof callback === 'function') {\n      this._unprepare(callback);\n\n      return this;\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._unprepare(err => {\n        if (err) return reject(err);\n        resolve();\n      });\n    });\n  }\n  /**\r\n   * @private\r\n   * @param {basicCallback} callback\r\n   */\n\n\n  _unprepare(callback) {\n    debug('ps(%d): unprepare', IDS.get(this));\n\n    if (!this.prepared) {\n      return setImmediate(callback, new PreparedStatementError('Statement is not prepared. Call prepare() first.', 'ENOTPREPARED'));\n    }\n\n    if (this._activeRequest) {\n      return setImmediate(callback, new TransactionError(\"Can't unprepare the statement. There is a request in progress.\", 'EREQINPROG'));\n    }\n\n    const req = new shared.driver.Request(this);\n    req.stream = false;\n    req.input('handle', TYPES.Int, this._handle);\n    req.execute('sp_unprepare', err => {\n      if (err) return callback(err);\n      this.parent.release(this._acquiredConnection);\n      this._acquiredConnection = null;\n      this._acquiredConfig = null;\n      this._handle = 0;\n      this.prepared = false;\n      debug('ps(%d): unprepared', IDS.get(this));\n      return callback(null);\n    });\n  }\n\n}\n\nmodule.exports = PreparedStatement;","map":{"version":3,"sources":["C:/Projects/sqlsample/node_modules/mssql/lib/base/prepared-statement.js"],"names":["debug","require","EventEmitter","IDS","objectHasProperty","globalConnection","TransactionError","PreparedStatementError","shared","TYPES","declare","PreparedStatement","constructor","parent","add","get","pool","_handle","prepared","parameters","connected","acquire","request","callback","_acquiredConnection","setImmediate","_activeRequest","_acquiredConfig","release","connection","input","name","type","test","arguments","length","Function","io","scale","precision","tvpType","replaceInput","value","output","replaceOutput","prepare","statement","_prepare","Promise","resolve","reject","err","undefined","config","req","driver","Request","stream","Int","NVarChar","result","param","push","join","execute","handle","values","_execute","recordset","unprepare","_unprepare","module","exports"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nconst debug = require('debug')('mssql:base')\r\nconst { EventEmitter } = require('events')\r\nconst { IDS, objectHasProperty } = require('../utils')\r\nconst globalConnection = require('../global-connection')\r\nconst { TransactionError, PreparedStatementError } = require('../error')\r\nconst shared = require('../shared')\r\nconst { TYPES, declare } = require('../datatypes')\r\n\r\n/**\r\n * Class PreparedStatement.\r\n *\r\n * IMPORTANT: Rememeber that each prepared statement means one reserved connection from the pool. Don't forget to unprepare a prepared statement!\r\n *\r\n * @property {String} statement Prepared SQL statement.\r\n */\r\n\r\nclass PreparedStatement extends EventEmitter {\r\n  /**\r\n   * Creates a new Prepared Statement.\r\n   *\r\n   * @param {ConnectionPool|Transaction} [holder]\r\n   */\r\n\r\n  constructor (parent) {\r\n    super()\r\n\r\n    IDS.add(this, 'PreparedStatement')\r\n    debug('ps(%d): created', IDS.get(this))\r\n\r\n    this.parent = parent || globalConnection.pool\r\n    this._handle = 0\r\n    this.prepared = false\r\n    this.parameters = {}\r\n  }\r\n\r\n  get connected () {\r\n    return this.parent.connected\r\n  }\r\n\r\n  /**\r\n   * Acquire connection from connection pool.\r\n   *\r\n   * @param {Request} request Request.\r\n   * @param {ConnectionPool~acquireCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\r\n   * @return {PreparedStatement|Promise}\r\n   */\r\n\r\n  acquire (request, callback) {\r\n    if (!this._acquiredConnection) {\r\n      setImmediate(callback, new PreparedStatementError('Statement is not prepared. Call prepare() first.', 'ENOTPREPARED'))\r\n      return this\r\n    }\r\n\r\n    if (this._activeRequest) {\r\n      setImmediate(callback, new TransactionError(\"Can't acquire connection for the request. There is another request in progress.\", 'EREQINPROG'))\r\n      return this\r\n    }\r\n\r\n    this._activeRequest = request\r\n    setImmediate(callback, null, this._acquiredConnection, this._acquiredConfig)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Release connection back to the pool.\r\n   *\r\n   * @param {Connection} connection Previously acquired connection.\r\n   * @return {PreparedStatement}\r\n   */\r\n\r\n  release (connection) {\r\n    if (connection === this._acquiredConnection) {\r\n      this._activeRequest = null\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Add an input parameter to the prepared statement.\r\n   *\r\n   * @param {String} name Name of the input parameter without @ char.\r\n   * @param {*} type SQL data type of input parameter.\r\n   * @return {PreparedStatement}\r\n   */\r\n\r\n  input (name, type) {\r\n    if ((/(--| |\\/\\*|\\*\\/|')/).test(name)) {\r\n      throw new PreparedStatementError(`SQL injection warning for param '${name}'`, 'EINJECT')\r\n    }\r\n\r\n    if (arguments.length < 2) {\r\n      throw new PreparedStatementError('Invalid number of arguments. 2 arguments expected.', 'EARGS')\r\n    }\r\n\r\n    if (type instanceof Function) {\r\n      type = type()\r\n    }\r\n\r\n    if (objectHasProperty(this.parameters, name)) {\r\n      throw new PreparedStatementError(`The parameter name ${name} has already been declared. Parameter names must be unique`, 'EDUPEPARAM')\r\n    }\r\n\r\n    this.parameters[name] = {\r\n      name,\r\n      type: type.type,\r\n      io: 1,\r\n      length: type.length,\r\n      scale: type.scale,\r\n      precision: type.precision,\r\n      tvpType: type.tvpType\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Replace an input parameter on the request.\r\n   *\r\n   * @param {String} name Name of the input parameter without @ char.\r\n   * @param {*} [type] SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\r\n   * @param {*} value Input parameter value. `undefined` and `NaN` values are automatically converted to `null` values.\r\n   * @return {Request}\r\n   */\r\n\r\n  replaceInput (name, type, value) {\r\n    delete this.parameters[name]\r\n\r\n    return this.input(name, type, value)\r\n  }\r\n\r\n  /**\r\n   * Add an output parameter to the prepared statement.\r\n   *\r\n   * @param {String} name Name of the output parameter without @ char.\r\n   * @param {*} type SQL data type of output parameter.\r\n   * @return {PreparedStatement}\r\n   */\r\n\r\n  output (name, type) {\r\n    if (/(--| |\\/\\*|\\*\\/|')/.test(name)) {\r\n      throw new PreparedStatementError(`SQL injection warning for param '${name}'`, 'EINJECT')\r\n    }\r\n\r\n    if (arguments.length < 2) {\r\n      throw new PreparedStatementError('Invalid number of arguments. 2 arguments expected.', 'EARGS')\r\n    }\r\n\r\n    if (type instanceof Function) type = type()\r\n\r\n    if (objectHasProperty(this.parameters, name)) {\r\n      throw new PreparedStatementError(`The parameter name ${name} has already been declared. Parameter names must be unique`, 'EDUPEPARAM')\r\n    }\r\n\r\n    this.parameters[name] = {\r\n      name,\r\n      type: type.type,\r\n      io: 2,\r\n      length: type.length,\r\n      scale: type.scale,\r\n      precision: type.precision\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Replace an output parameter on the request.\r\n   *\r\n   * @param {String} name Name of the output parameter without @ char.\r\n   * @param {*} type SQL data type of output parameter.\r\n   * @return {PreparedStatement}\r\n   */\r\n\r\n  replaceOutput (name, type) {\r\n    delete this.parameters[name]\r\n\r\n    return this.output(name, type)\r\n  }\r\n\r\n  /**\r\n   * Prepare a statement.\r\n   *\r\n   * @param {String} statement SQL statement to prepare.\r\n   * @param {basicCallback} [callback] A callback which is called after preparation has completed, or an error has occurred. If omited, method returns Promise.\r\n   * @return {PreparedStatement|Promise}\r\n   */\r\n\r\n  prepare (statement, callback) {\r\n    if (typeof callback === 'function') {\r\n      this._prepare(statement, callback)\r\n      return this\r\n    }\r\n\r\n    return new shared.Promise((resolve, reject) => {\r\n      this._prepare(statement, err => {\r\n        if (err) return reject(err)\r\n        resolve(this)\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {String} statement\r\n   * @param {basicCallback} callback\r\n   */\r\n\r\n  _prepare (statement, callback) {\r\n    debug('ps(%d): prepare', IDS.get(this))\r\n\r\n    if (typeof statement === 'function') {\r\n      callback = statement\r\n      statement = undefined\r\n    }\r\n\r\n    if (this.prepared) {\r\n      return setImmediate(callback, new PreparedStatementError('Statement is already prepared.', 'EALREADYPREPARED'))\r\n    }\r\n\r\n    this.statement = statement || this.statement\r\n\r\n    this.parent.acquire(this, (err, connection, config) => {\r\n      if (err) return callback(err)\r\n\r\n      this._acquiredConnection = connection\r\n      this._acquiredConfig = config\r\n\r\n      const req = new shared.driver.Request(this)\r\n      req.stream = false\r\n      req.output('handle', TYPES.Int)\r\n      req.input('params', TYPES.NVarChar, ((() => {\r\n        const result = []\r\n        for (const name in this.parameters) {\r\n          if (!objectHasProperty(this.parameters, name)) {\r\n            continue\r\n          }\r\n          const param = this.parameters[name]\r\n          result.push(`@${name} ${declare(param.type, param)}${param.io === 2 ? ' output' : ''}`)\r\n        }\r\n        return result\r\n      })()).join(','))\r\n      req.input('stmt', TYPES.NVarChar, this.statement)\r\n      req.execute('sp_prepare', (err, result) => {\r\n        if (err) {\r\n          this.parent.release(this._acquiredConnection)\r\n          this._acquiredConnection = null\r\n          this._acquiredConfig = null\r\n\r\n          return callback(err)\r\n        }\r\n\r\n        debug('ps(%d): prepared', IDS.get(this))\r\n\r\n        this._handle = result.output.handle\r\n        this.prepared = true\r\n\r\n        callback(null)\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Execute a prepared statement.\r\n   *\r\n   * @param {Object} values An object whose names correspond to the names of parameters that were added to the prepared statement before it was prepared.\r\n   * @param {basicCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\r\n   * @return {Request|Promise}\r\n   */\r\n\r\n  execute (values, callback) {\r\n    if (this.stream || (typeof callback === 'function')) {\r\n      return this._execute(values, callback)\r\n    }\r\n\r\n    return new shared.Promise((resolve, reject) => {\r\n      this._execute(values, (err, recordset) => {\r\n        if (err) return reject(err)\r\n        resolve(recordset)\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Object} values\r\n   * @param {basicCallback} callback\r\n   */\r\n\r\n  _execute (values, callback) {\r\n    const req = new shared.driver.Request(this)\r\n    req.stream = this.stream\r\n    req.input('handle', TYPES.Int, this._handle)\r\n\r\n    // copy parameters with new values\r\n    for (const name in this.parameters) {\r\n      if (!objectHasProperty(this.parameters, name)) {\r\n        continue\r\n      }\r\n      const param = this.parameters[name]\r\n      req.parameters[name] = {\r\n        name,\r\n        type: param.type,\r\n        io: param.io,\r\n        value: values[name],\r\n        length: param.length,\r\n        scale: param.scale,\r\n        precision: param.precision\r\n      }\r\n    }\r\n\r\n    req.execute('sp_execute', (err, result) => {\r\n      if (err) return callback(err)\r\n\r\n      callback(null, result)\r\n    })\r\n\r\n    return req\r\n  }\r\n\r\n  /**\r\n   * Unprepare a prepared statement.\r\n   *\r\n   * @param {basicCallback} [callback] A callback which is called after unpreparation has completed, or an error has occurred. If omited, method returns Promise.\r\n   * @return {PreparedStatement|Promise}\r\n   */\r\n\r\n  unprepare (callback) {\r\n    if (typeof callback === 'function') {\r\n      this._unprepare(callback)\r\n      return this\r\n    }\r\n\r\n    return new shared.Promise((resolve, reject) => {\r\n      this._unprepare(err => {\r\n        if (err) return reject(err)\r\n        resolve()\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {basicCallback} callback\r\n   */\r\n\r\n  _unprepare (callback) {\r\n    debug('ps(%d): unprepare', IDS.get(this))\r\n\r\n    if (!this.prepared) {\r\n      return setImmediate(callback, new PreparedStatementError('Statement is not prepared. Call prepare() first.', 'ENOTPREPARED'))\r\n    }\r\n\r\n    if (this._activeRequest) {\r\n      return setImmediate(callback, new TransactionError(\"Can't unprepare the statement. There is a request in progress.\", 'EREQINPROG'))\r\n    }\r\n\r\n    const req = new shared.driver.Request(this)\r\n    req.stream = false\r\n    req.input('handle', TYPES.Int, this._handle)\r\n    req.execute('sp_unprepare', err => {\r\n      if (err) return callback(err)\r\n\r\n      this.parent.release(this._acquiredConnection)\r\n      this._acquiredConnection = null\r\n      this._acquiredConfig = null\r\n      this._handle = 0\r\n      this.prepared = false\r\n\r\n      debug('ps(%d): unprepared', IDS.get(this))\r\n\r\n      return callback(null)\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = PreparedStatement\r\n"]},"metadata":{},"sourceType":"script"}