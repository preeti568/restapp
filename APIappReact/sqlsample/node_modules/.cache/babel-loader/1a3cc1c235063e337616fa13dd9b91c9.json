{"ast":null,"code":"'use strict';\n\nconst tds = require('tedious');\n\nconst debug = require('debug')('mssql:tedi');\n\nconst BaseConnectionPool = require('../base/connection-pool');\n\nconst {\n  IDS\n} = require('../utils');\n\nconst shared = require('../shared');\n\nconst ConnectionError = require('../error/connection-error');\n\nclass ConnectionPool extends BaseConnectionPool {\n  _poolCreate() {\n    return new shared.Promise((resolve, reject) => {\n      const resolveOnce = v => {\n        resolve(v);\n\n        resolve = reject = () => {};\n      };\n\n      const rejectOnce = e => {\n        reject(e);\n\n        resolve = reject = () => {};\n      };\n\n      const cfg = {\n        server: this.config.server,\n        options: Object.assign({\n          encrypt: typeof this.config.encrypt === 'boolean' ? this.config.encrypt : true\n        }, this.config.options),\n        authentication: Object.assign({\n          type: this.config.domain !== undefined ? 'ntlm' : 'default',\n          options: {\n            userName: this.config.user,\n            password: this.config.password,\n            domain: this.config.domain\n          }\n        }, this.config.authentication)\n      };\n      cfg.options.database = this.config.database;\n      cfg.options.port = this.config.port;\n      cfg.options.connectTimeout = this.config.connectionTimeout || this.config.timeout || 15000;\n      cfg.options.requestTimeout = this.config.requestTimeout != null ? this.config.requestTimeout : 15000;\n      cfg.options.tdsVersion = cfg.options.tdsVersion || '7_4';\n      cfg.options.rowCollectionOnDone = false;\n      cfg.options.rowCollectionOnRequestCompletion = false;\n      cfg.options.useColumnNames = false;\n      cfg.options.appName = cfg.options.appName || 'node-mssql'; // tedious always connect via tcp when port is specified\n\n      if (cfg.options.instanceName) delete cfg.options.port;\n      if (isNaN(cfg.options.requestTimeout)) cfg.options.requestTimeout = 15000;\n      if (cfg.options.requestTimeout === Infinity) cfg.options.requestTimeout = 0;\n      if (cfg.options.requestTimeout < 0) cfg.options.requestTimeout = 0;\n\n      if (this.config.debug) {\n        cfg.options.debug = {\n          packet: true,\n          token: true,\n          data: true,\n          payload: true\n        };\n      }\n\n      const tedious = new tds.Connection(cfg);\n      IDS.add(tedious, 'Connection');\n      debug('pool(%d): connection #%d created', IDS.get(this), IDS.get(tedious));\n      debug('connection(%d): establishing', IDS.get(tedious));\n      tedious.once('connect', err => {\n        if (err) {\n          err = new ConnectionError(err);\n          return rejectOnce(err);\n        }\n\n        debug('connection(%d): established', IDS.get(tedious));\n        resolveOnce(tedious);\n      });\n      tedious.on('end', () => {\n        const err = new ConnectionError('The connection ended without ever completing the connection');\n        rejectOnce(err);\n      });\n      tedious.on('error', err => {\n        if (err.code === 'ESOCKET') {\n          tedious.hasError = true;\n        } else {\n          this.emit('error', err);\n        }\n\n        rejectOnce(err);\n      });\n\n      if (this.config.debug) {\n        tedious.on('debug', this.emit.bind(this, 'debug', tedious));\n      }\n\n      if (typeof this.config.beforeConnect === 'function') {\n        this.config.beforeConnect(tedious);\n      }\n    });\n  }\n\n  _poolValidate(tedious) {\n    return tedious && !tedious.closed && !tedious.hasError;\n  }\n\n  _poolDestroy(tedious) {\n    return new shared.Promise((resolve, reject) => {\n      if (!tedious) {\n        resolve();\n        return;\n      }\n\n      debug('connection(%d): destroying', IDS.get(tedious));\n\n      if (tedious.closed) {\n        debug('connection(%d): already closed', IDS.get(tedious));\n        resolve();\n      } else {\n        tedious.once('end', () => {\n          debug('connection(%d): destroyed', IDS.get(tedious));\n          resolve();\n        });\n        tedious.close();\n      }\n    });\n  }\n\n}\n\nmodule.exports = ConnectionPool;","map":{"version":3,"sources":["C:/Projects/sqlsample/node_modules/mssql/lib/tedious/connection-pool.js"],"names":["tds","require","debug","BaseConnectionPool","IDS","shared","ConnectionError","ConnectionPool","_poolCreate","Promise","resolve","reject","resolveOnce","v","rejectOnce","e","cfg","server","config","options","Object","assign","encrypt","authentication","type","domain","undefined","userName","user","password","database","port","connectTimeout","connectionTimeout","timeout","requestTimeout","tdsVersion","rowCollectionOnDone","rowCollectionOnRequestCompletion","useColumnNames","appName","instanceName","isNaN","Infinity","packet","token","data","payload","tedious","Connection","add","get","once","err","on","code","hasError","emit","bind","beforeConnect","_poolValidate","closed","_poolDestroy","close","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,SAAD,CAAnB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAP,CAAiB,YAAjB,CAAd;;AACA,MAAME,kBAAkB,GAAGF,OAAO,CAAC,yBAAD,CAAlC;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAUH,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAMK,eAAe,GAAGL,OAAO,CAAC,2BAAD,CAA/B;;AAEA,MAAMM,cAAN,SAA6BJ,kBAA7B,CAAgD;AAC9CK,EAAAA,WAAW,GAAI;AACb,WAAO,IAAIH,MAAM,CAACI,OAAX,CAAmB,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7C,YAAMC,WAAW,GAAIC,CAAD,IAAO;AACzBH,QAAAA,OAAO,CAACG,CAAD,CAAP;;AACAH,QAAAA,OAAO,GAAGC,MAAM,GAAG,MAAM,CAAE,CAA3B;AACD,OAHD;;AAIA,YAAMG,UAAU,GAAIC,CAAD,IAAO;AACxBJ,QAAAA,MAAM,CAACI,CAAD,CAAN;;AACAL,QAAAA,OAAO,GAAGC,MAAM,GAAG,MAAM,CAAE,CAA3B;AACD,OAHD;;AAIA,YAAMK,GAAG,GAAG;AACVC,QAAAA,MAAM,EAAE,KAAKC,MAAL,CAAYD,MADV;AAEVE,QAAAA,OAAO,EAAEC,MAAM,CAACC,MAAP,CAAc;AACrBC,UAAAA,OAAO,EAAE,OAAO,KAAKJ,MAAL,CAAYI,OAAnB,KAA+B,SAA/B,GAA2C,KAAKJ,MAAL,CAAYI,OAAvD,GAAiE;AADrD,SAAd,EAEN,KAAKJ,MAAL,CAAYC,OAFN,CAFC;AAKVI,QAAAA,cAAc,EAAEH,MAAM,CAACC,MAAP,CAAc;AAC5BG,UAAAA,IAAI,EAAE,KAAKN,MAAL,CAAYO,MAAZ,KAAuBC,SAAvB,GAAmC,MAAnC,GAA4C,SADtB;AAE5BP,UAAAA,OAAO,EAAE;AACPQ,YAAAA,QAAQ,EAAE,KAAKT,MAAL,CAAYU,IADf;AAEPC,YAAAA,QAAQ,EAAE,KAAKX,MAAL,CAAYW,QAFf;AAGPJ,YAAAA,MAAM,EAAE,KAAKP,MAAL,CAAYO;AAHb;AAFmB,SAAd,EAOb,KAAKP,MAAL,CAAYK,cAPC;AALN,OAAZ;AAeAP,MAAAA,GAAG,CAACG,OAAJ,CAAYW,QAAZ,GAAuB,KAAKZ,MAAL,CAAYY,QAAnC;AACAd,MAAAA,GAAG,CAACG,OAAJ,CAAYY,IAAZ,GAAmB,KAAKb,MAAL,CAAYa,IAA/B;AACAf,MAAAA,GAAG,CAACG,OAAJ,CAAYa,cAAZ,GAA6B,KAAKd,MAAL,CAAYe,iBAAZ,IAAiC,KAAKf,MAAL,CAAYgB,OAA7C,IAAwD,KAArF;AACAlB,MAAAA,GAAG,CAACG,OAAJ,CAAYgB,cAAZ,GAA6B,KAAKjB,MAAL,CAAYiB,cAAZ,IAA8B,IAA9B,GAAqC,KAAKjB,MAAL,CAAYiB,cAAjD,GAAkE,KAA/F;AACAnB,MAAAA,GAAG,CAACG,OAAJ,CAAYiB,UAAZ,GAAyBpB,GAAG,CAACG,OAAJ,CAAYiB,UAAZ,IAA0B,KAAnD;AACApB,MAAAA,GAAG,CAACG,OAAJ,CAAYkB,mBAAZ,GAAkC,KAAlC;AACArB,MAAAA,GAAG,CAACG,OAAJ,CAAYmB,gCAAZ,GAA+C,KAA/C;AACAtB,MAAAA,GAAG,CAACG,OAAJ,CAAYoB,cAAZ,GAA6B,KAA7B;AACAvB,MAAAA,GAAG,CAACG,OAAJ,CAAYqB,OAAZ,GAAsBxB,GAAG,CAACG,OAAJ,CAAYqB,OAAZ,IAAuB,YAA7C,CAhC6C,CAkC7C;;AACA,UAAIxB,GAAG,CAACG,OAAJ,CAAYsB,YAAhB,EAA8B,OAAOzB,GAAG,CAACG,OAAJ,CAAYY,IAAnB;AAE9B,UAAIW,KAAK,CAAC1B,GAAG,CAACG,OAAJ,CAAYgB,cAAb,CAAT,EAAuCnB,GAAG,CAACG,OAAJ,CAAYgB,cAAZ,GAA6B,KAA7B;AACvC,UAAInB,GAAG,CAACG,OAAJ,CAAYgB,cAAZ,KAA+BQ,QAAnC,EAA6C3B,GAAG,CAACG,OAAJ,CAAYgB,cAAZ,GAA6B,CAA7B;AAC7C,UAAInB,GAAG,CAACG,OAAJ,CAAYgB,cAAZ,GAA6B,CAAjC,EAAoCnB,GAAG,CAACG,OAAJ,CAAYgB,cAAZ,GAA6B,CAA7B;;AAEpC,UAAI,KAAKjB,MAAL,CAAYhB,KAAhB,EAAuB;AACrBc,QAAAA,GAAG,CAACG,OAAJ,CAAYjB,KAAZ,GAAoB;AAClB0C,UAAAA,MAAM,EAAE,IADU;AAElBC,UAAAA,KAAK,EAAE,IAFW;AAGlBC,UAAAA,IAAI,EAAE,IAHY;AAIlBC,UAAAA,OAAO,EAAE;AAJS,SAApB;AAMD;;AACD,YAAMC,OAAO,GAAG,IAAIhD,GAAG,CAACiD,UAAR,CAAmBjC,GAAnB,CAAhB;AACAZ,MAAAA,GAAG,CAAC8C,GAAJ,CAAQF,OAAR,EAAiB,YAAjB;AACA9C,MAAAA,KAAK,CAAC,kCAAD,EAAqCE,GAAG,CAAC+C,GAAJ,CAAQ,IAAR,CAArC,EAAoD/C,GAAG,CAAC+C,GAAJ,CAAQH,OAAR,CAApD,CAAL;AACA9C,MAAAA,KAAK,CAAC,8BAAD,EAAiCE,GAAG,CAAC+C,GAAJ,CAAQH,OAAR,CAAjC,CAAL;AAEAA,MAAAA,OAAO,CAACI,IAAR,CAAa,SAAb,EAAwBC,GAAG,IAAI;AAC7B,YAAIA,GAAJ,EAAS;AACPA,UAAAA,GAAG,GAAG,IAAI/C,eAAJ,CAAoB+C,GAApB,CAAN;AACA,iBAAOvC,UAAU,CAACuC,GAAD,CAAjB;AACD;;AAEDnD,QAAAA,KAAK,CAAC,6BAAD,EAAgCE,GAAG,CAAC+C,GAAJ,CAAQH,OAAR,CAAhC,CAAL;AACApC,QAAAA,WAAW,CAACoC,OAAD,CAAX;AACD,OARD;AAUAA,MAAAA,OAAO,CAACM,EAAR,CAAW,KAAX,EAAkB,MAAM;AACtB,cAAMD,GAAG,GAAG,IAAI/C,eAAJ,CAAoB,6DAApB,CAAZ;AACAQ,QAAAA,UAAU,CAACuC,GAAD,CAAV;AACD,OAHD;AAIAL,MAAAA,OAAO,CAACM,EAAR,CAAW,OAAX,EAAoBD,GAAG,IAAI;AACzB,YAAIA,GAAG,CAACE,IAAJ,KAAa,SAAjB,EAA4B;AAC1BP,UAAAA,OAAO,CAACQ,QAAR,GAAmB,IAAnB;AACD,SAFD,MAEO;AACL,eAAKC,IAAL,CAAU,OAAV,EAAmBJ,GAAnB;AACD;;AACDvC,QAAAA,UAAU,CAACuC,GAAD,CAAV;AACD,OAPD;;AASA,UAAI,KAAKnC,MAAL,CAAYhB,KAAhB,EAAuB;AACrB8C,QAAAA,OAAO,CAACM,EAAR,CAAW,OAAX,EAAoB,KAAKG,IAAL,CAAUC,IAAV,CAAe,IAAf,EAAqB,OAArB,EAA8BV,OAA9B,CAApB;AACD;;AACD,UAAI,OAAO,KAAK9B,MAAL,CAAYyC,aAAnB,KAAqC,UAAzC,EAAqD;AACnD,aAAKzC,MAAL,CAAYyC,aAAZ,CAA0BX,OAA1B;AACD;AACF,KAnFM,CAAP;AAoFD;;AAEDY,EAAAA,aAAa,CAAEZ,OAAF,EAAW;AACtB,WAAOA,OAAO,IAAI,CAACA,OAAO,CAACa,MAApB,IAA8B,CAACb,OAAO,CAACQ,QAA9C;AACD;;AAEDM,EAAAA,YAAY,CAAEd,OAAF,EAAW;AACrB,WAAO,IAAI3C,MAAM,CAACI,OAAX,CAAmB,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7C,UAAI,CAACqC,OAAL,EAAc;AACZtC,QAAAA,OAAO;AACP;AACD;;AACDR,MAAAA,KAAK,CAAC,4BAAD,EAA+BE,GAAG,CAAC+C,GAAJ,CAAQH,OAAR,CAA/B,CAAL;;AAEA,UAAIA,OAAO,CAACa,MAAZ,EAAoB;AAClB3D,QAAAA,KAAK,CAAC,gCAAD,EAAmCE,GAAG,CAAC+C,GAAJ,CAAQH,OAAR,CAAnC,CAAL;AACAtC,QAAAA,OAAO;AACR,OAHD,MAGO;AACLsC,QAAAA,OAAO,CAACI,IAAR,CAAa,KAAb,EAAoB,MAAM;AACxBlD,UAAAA,KAAK,CAAC,2BAAD,EAA8BE,GAAG,CAAC+C,GAAJ,CAAQH,OAAR,CAA9B,CAAL;AACAtC,UAAAA,OAAO;AACR,SAHD;AAKAsC,QAAAA,OAAO,CAACe,KAAR;AACD;AACF,KAlBM,CAAP;AAmBD;;AAhH6C;;AAmHhDC,MAAM,CAACC,OAAP,GAAiB1D,cAAjB","sourcesContent":["'use strict'\r\n\r\nconst tds = require('tedious')\r\nconst debug = require('debug')('mssql:tedi')\r\nconst BaseConnectionPool = require('../base/connection-pool')\r\nconst { IDS } = require('../utils')\r\nconst shared = require('../shared')\r\nconst ConnectionError = require('../error/connection-error')\r\n\r\nclass ConnectionPool extends BaseConnectionPool {\r\n  _poolCreate () {\r\n    return new shared.Promise((resolve, reject) => {\r\n      const resolveOnce = (v) => {\r\n        resolve(v)\r\n        resolve = reject = () => {}\r\n      }\r\n      const rejectOnce = (e) => {\r\n        reject(e)\r\n        resolve = reject = () => {}\r\n      }\r\n      const cfg = {\r\n        server: this.config.server,\r\n        options: Object.assign({\r\n          encrypt: typeof this.config.encrypt === 'boolean' ? this.config.encrypt : true\r\n        }, this.config.options),\r\n        authentication: Object.assign({\r\n          type: this.config.domain !== undefined ? 'ntlm' : 'default',\r\n          options: {\r\n            userName: this.config.user,\r\n            password: this.config.password,\r\n            domain: this.config.domain\r\n          }\r\n        }, this.config.authentication)\r\n      }\r\n\r\n      cfg.options.database = this.config.database\r\n      cfg.options.port = this.config.port\r\n      cfg.options.connectTimeout = this.config.connectionTimeout || this.config.timeout || 15000\r\n      cfg.options.requestTimeout = this.config.requestTimeout != null ? this.config.requestTimeout : 15000\r\n      cfg.options.tdsVersion = cfg.options.tdsVersion || '7_4'\r\n      cfg.options.rowCollectionOnDone = false\r\n      cfg.options.rowCollectionOnRequestCompletion = false\r\n      cfg.options.useColumnNames = false\r\n      cfg.options.appName = cfg.options.appName || 'node-mssql'\r\n\r\n      // tedious always connect via tcp when port is specified\r\n      if (cfg.options.instanceName) delete cfg.options.port\r\n\r\n      if (isNaN(cfg.options.requestTimeout)) cfg.options.requestTimeout = 15000\r\n      if (cfg.options.requestTimeout === Infinity) cfg.options.requestTimeout = 0\r\n      if (cfg.options.requestTimeout < 0) cfg.options.requestTimeout = 0\r\n\r\n      if (this.config.debug) {\r\n        cfg.options.debug = {\r\n          packet: true,\r\n          token: true,\r\n          data: true,\r\n          payload: true\r\n        }\r\n      }\r\n      const tedious = new tds.Connection(cfg)\r\n      IDS.add(tedious, 'Connection')\r\n      debug('pool(%d): connection #%d created', IDS.get(this), IDS.get(tedious))\r\n      debug('connection(%d): establishing', IDS.get(tedious))\r\n\r\n      tedious.once('connect', err => {\r\n        if (err) {\r\n          err = new ConnectionError(err)\r\n          return rejectOnce(err)\r\n        }\r\n\r\n        debug('connection(%d): established', IDS.get(tedious))\r\n        resolveOnce(tedious)\r\n      })\r\n\r\n      tedious.on('end', () => {\r\n        const err = new ConnectionError('The connection ended without ever completing the connection')\r\n        rejectOnce(err)\r\n      })\r\n      tedious.on('error', err => {\r\n        if (err.code === 'ESOCKET') {\r\n          tedious.hasError = true\r\n        } else {\r\n          this.emit('error', err)\r\n        }\r\n        rejectOnce(err)\r\n      })\r\n\r\n      if (this.config.debug) {\r\n        tedious.on('debug', this.emit.bind(this, 'debug', tedious))\r\n      }\r\n      if (typeof this.config.beforeConnect === 'function') {\r\n        this.config.beforeConnect(tedious)\r\n      }\r\n    })\r\n  }\r\n\r\n  _poolValidate (tedious) {\r\n    return tedious && !tedious.closed && !tedious.hasError\r\n  }\r\n\r\n  _poolDestroy (tedious) {\r\n    return new shared.Promise((resolve, reject) => {\r\n      if (!tedious) {\r\n        resolve()\r\n        return\r\n      }\r\n      debug('connection(%d): destroying', IDS.get(tedious))\r\n\r\n      if (tedious.closed) {\r\n        debug('connection(%d): already closed', IDS.get(tedious))\r\n        resolve()\r\n      } else {\r\n        tedious.once('end', () => {\r\n          debug('connection(%d): destroyed', IDS.get(tedious))\r\n          resolve()\r\n        })\r\n\r\n        tedious.close()\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = ConnectionPool\r\n"]},"metadata":{},"sourceType":"script"}