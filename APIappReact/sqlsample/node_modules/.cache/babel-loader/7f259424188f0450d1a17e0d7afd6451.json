{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst Time = {\n  id: 0x29,\n  type: 'TIMEN',\n  name: 'Time',\n  declaration: function declaration(parameter) {\n    return 'time(' + this.resolveScale(parameter) + ')';\n  },\n  resolveScale: function resolveScale(parameter) {\n    if (parameter.scale != null) {\n      return parameter.scale;\n    } else if (parameter.value === null) {\n      return 0;\n    } else {\n      return 7;\n    }\n  },\n  writeTypeInfo: function writeTypeInfo(buffer, parameter) {\n    buffer.writeUInt8(this.id);\n    buffer.writeUInt8(parameter.scale);\n  },\n  writeParameterData: function writeParameterData(buffer, parameter, options, cb) {\n    if (parameter.value != null) {\n      const time = parameter.value;\n      let timestamp;\n\n      if (options.useUTC) {\n        timestamp = ((time.getUTCHours() * 60 + time.getUTCMinutes()) * 60 + time.getUTCSeconds()) * 1000 + time.getUTCMilliseconds();\n      } else {\n        timestamp = ((time.getHours() * 60 + time.getMinutes()) * 60 + time.getSeconds()) * 1000 + time.getMilliseconds();\n      }\n\n      timestamp = timestamp * Math.pow(10, parameter.scale - 3);\n      timestamp += (parameter.value.nanosecondDelta != null ? parameter.value.nanosecondDelta : 0) * Math.pow(10, parameter.scale);\n      timestamp = Math.round(timestamp);\n\n      switch (parameter.scale) {\n        case 0:\n        case 1:\n        case 2:\n          buffer.writeUInt8(3);\n          buffer.writeUInt24LE(timestamp);\n          break;\n\n        case 3:\n        case 4:\n          buffer.writeUInt8(4);\n          buffer.writeUInt32LE(timestamp);\n          break;\n\n        case 5:\n        case 6:\n        case 7:\n          buffer.writeUInt8(5);\n          buffer.writeUInt40LE(timestamp);\n      }\n    } else {\n      buffer.writeUInt8(0);\n    }\n\n    cb();\n  },\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!(value instanceof Date)) {\n      value = new Date(Date.parse(value));\n    }\n\n    if (isNaN(value)) {\n      return new TypeError('Invalid time.');\n    }\n\n    return value;\n  }\n};\nvar _default = Time;\nexports.default = _default;\nmodule.exports = Time;","map":{"version":3,"sources":["C:/Projects/sqlsample/node_modules/tedious/lib/data-types/time.js"],"names":["Object","defineProperty","exports","value","default","Time","id","type","name","declaration","parameter","resolveScale","scale","writeTypeInfo","buffer","writeUInt8","writeParameterData","options","cb","time","timestamp","useUTC","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","getHours","getMinutes","getSeconds","getMilliseconds","Math","pow","nanosecondDelta","round","writeUInt24LE","writeUInt32LE","writeUInt40LE","validate","Date","parse","isNaN","TypeError","_default","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;AACA,MAAMC,IAAI,GAAG;AACXC,EAAAA,EAAE,EAAE,IADO;AAEXC,EAAAA,IAAI,EAAE,OAFK;AAGXC,EAAAA,IAAI,EAAE,MAHK;AAIXC,EAAAA,WAAW,EAAE,SAASA,WAAT,CAAqBC,SAArB,EAAgC;AAC3C,WAAO,UAAU,KAAKC,YAAL,CAAkBD,SAAlB,CAAV,GAAyC,GAAhD;AACD,GANU;AAOXC,EAAAA,YAAY,EAAE,SAASA,YAAT,CAAsBD,SAAtB,EAAiC;AAC7C,QAAIA,SAAS,CAACE,KAAV,IAAmB,IAAvB,EAA6B;AAC3B,aAAOF,SAAS,CAACE,KAAjB;AACD,KAFD,MAEO,IAAIF,SAAS,CAACP,KAAV,KAAoB,IAAxB,EAA8B;AACnC,aAAO,CAAP;AACD,KAFM,MAEA;AACL,aAAO,CAAP;AACD;AACF,GAfU;AAgBXU,EAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBC,MAAvB,EAA+BJ,SAA/B,EAA0C;AACvDI,IAAAA,MAAM,CAACC,UAAP,CAAkB,KAAKT,EAAvB;AACAQ,IAAAA,MAAM,CAACC,UAAP,CAAkBL,SAAS,CAACE,KAA5B;AACD,GAnBU;AAoBXI,EAAAA,kBAAkB,EAAE,SAASA,kBAAT,CAA4BF,MAA5B,EAAoCJ,SAApC,EAA+CO,OAA/C,EAAwDC,EAAxD,EAA4D;AAC9E,QAAIR,SAAS,CAACP,KAAV,IAAmB,IAAvB,EAA6B;AAC3B,YAAMgB,IAAI,GAAGT,SAAS,CAACP,KAAvB;AACA,UAAIiB,SAAJ;;AAEA,UAAIH,OAAO,CAACI,MAAZ,EAAoB;AAClBD,QAAAA,SAAS,GAAG,CAAC,CAACD,IAAI,CAACG,WAAL,KAAqB,EAArB,GAA0BH,IAAI,CAACI,aAAL,EAA3B,IAAmD,EAAnD,GAAwDJ,IAAI,CAACK,aAAL,EAAzD,IAAiF,IAAjF,GAAwFL,IAAI,CAACM,kBAAL,EAApG;AACD,OAFD,MAEO;AACLL,QAAAA,SAAS,GAAG,CAAC,CAACD,IAAI,CAACO,QAAL,KAAkB,EAAlB,GAAuBP,IAAI,CAACQ,UAAL,EAAxB,IAA6C,EAA7C,GAAkDR,IAAI,CAACS,UAAL,EAAnD,IAAwE,IAAxE,GAA+ET,IAAI,CAACU,eAAL,EAA3F;AACD;;AAEDT,MAAAA,SAAS,GAAGA,SAAS,GAAGU,IAAI,CAACC,GAAL,CAAS,EAAT,EAAarB,SAAS,CAACE,KAAV,GAAkB,CAA/B,CAAxB;AACAQ,MAAAA,SAAS,IAAI,CAACV,SAAS,CAACP,KAAV,CAAgB6B,eAAhB,IAAmC,IAAnC,GAA0CtB,SAAS,CAACP,KAAV,CAAgB6B,eAA1D,GAA4E,CAA7E,IAAkFF,IAAI,CAACC,GAAL,CAAS,EAAT,EAAarB,SAAS,CAACE,KAAvB,CAA/F;AACAQ,MAAAA,SAAS,GAAGU,IAAI,CAACG,KAAL,CAAWb,SAAX,CAAZ;;AAEA,cAAQV,SAAS,CAACE,KAAlB;AACE,aAAK,CAAL;AACA,aAAK,CAAL;AACA,aAAK,CAAL;AACEE,UAAAA,MAAM,CAACC,UAAP,CAAkB,CAAlB;AACAD,UAAAA,MAAM,CAACoB,aAAP,CAAqBd,SAArB;AACA;;AAEF,aAAK,CAAL;AACA,aAAK,CAAL;AACEN,UAAAA,MAAM,CAACC,UAAP,CAAkB,CAAlB;AACAD,UAAAA,MAAM,CAACqB,aAAP,CAAqBf,SAArB;AACA;;AAEF,aAAK,CAAL;AACA,aAAK,CAAL;AACA,aAAK,CAAL;AACEN,UAAAA,MAAM,CAACC,UAAP,CAAkB,CAAlB;AACAD,UAAAA,MAAM,CAACsB,aAAP,CAAqBhB,SAArB;AAlBJ;AAoBD,KAlCD,MAkCO;AACLN,MAAAA,MAAM,CAACC,UAAP,CAAkB,CAAlB;AACD;;AAEDG,IAAAA,EAAE;AACH,GA5DU;AA6DXmB,EAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBlC,KAAlB,EAAyB;AACjC,QAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,QAAI,EAAEA,KAAK,YAAYmC,IAAnB,CAAJ,EAA8B;AAC5BnC,MAAAA,KAAK,GAAG,IAAImC,IAAJ,CAASA,IAAI,CAACC,KAAL,CAAWpC,KAAX,CAAT,CAAR;AACD;;AAED,QAAIqC,KAAK,CAACrC,KAAD,CAAT,EAAkB;AAChB,aAAO,IAAIsC,SAAJ,CAAc,eAAd,CAAP;AACD;;AAED,WAAOtC,KAAP;AACD;AA3EU,CAAb;AA6EA,IAAIuC,QAAQ,GAAGrC,IAAf;AACAH,OAAO,CAACE,OAAR,GAAkBsC,QAAlB;AACAC,MAAM,CAACzC,OAAP,GAAiBG,IAAjB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst Time = {\n  id: 0x29,\n  type: 'TIMEN',\n  name: 'Time',\n  declaration: function declaration(parameter) {\n    return 'time(' + this.resolveScale(parameter) + ')';\n  },\n  resolveScale: function resolveScale(parameter) {\n    if (parameter.scale != null) {\n      return parameter.scale;\n    } else if (parameter.value === null) {\n      return 0;\n    } else {\n      return 7;\n    }\n  },\n  writeTypeInfo: function writeTypeInfo(buffer, parameter) {\n    buffer.writeUInt8(this.id);\n    buffer.writeUInt8(parameter.scale);\n  },\n  writeParameterData: function writeParameterData(buffer, parameter, options, cb) {\n    if (parameter.value != null) {\n      const time = parameter.value;\n      let timestamp;\n\n      if (options.useUTC) {\n        timestamp = ((time.getUTCHours() * 60 + time.getUTCMinutes()) * 60 + time.getUTCSeconds()) * 1000 + time.getUTCMilliseconds();\n      } else {\n        timestamp = ((time.getHours() * 60 + time.getMinutes()) * 60 + time.getSeconds()) * 1000 + time.getMilliseconds();\n      }\n\n      timestamp = timestamp * Math.pow(10, parameter.scale - 3);\n      timestamp += (parameter.value.nanosecondDelta != null ? parameter.value.nanosecondDelta : 0) * Math.pow(10, parameter.scale);\n      timestamp = Math.round(timestamp);\n\n      switch (parameter.scale) {\n        case 0:\n        case 1:\n        case 2:\n          buffer.writeUInt8(3);\n          buffer.writeUInt24LE(timestamp);\n          break;\n\n        case 3:\n        case 4:\n          buffer.writeUInt8(4);\n          buffer.writeUInt32LE(timestamp);\n          break;\n\n        case 5:\n        case 6:\n        case 7:\n          buffer.writeUInt8(5);\n          buffer.writeUInt40LE(timestamp);\n      }\n    } else {\n      buffer.writeUInt8(0);\n    }\n\n    cb();\n  },\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!(value instanceof Date)) {\n      value = new Date(Date.parse(value));\n    }\n\n    if (isNaN(value)) {\n      return new TypeError('Invalid time.');\n    }\n\n    return value;\n  }\n};\nvar _default = Time;\nexports.default = _default;\nmodule.exports = Time;"]},"metadata":{},"sourceType":"script"}