{"ast":null,"code":"'use strict';\n\nconst debug = require('debug')('mssql:base');\n\nconst {\n  EventEmitter\n} = require('events');\n\nconst {\n  IDS\n} = require('../utils');\n\nconst globalConnection = require('../global-connection');\n\nconst {\n  TransactionError\n} = require('../error');\n\nconst shared = require('../shared');\n\nconst ISOLATION_LEVEL = require('../isolationlevel');\n/**\r\n * Class Transaction.\r\n *\r\n * @property {Number} isolationLevel Controls the locking and row versioning behavior of TSQL statements issued by a connection. READ_COMMITTED by default.\r\n * @property {String} name Transaction name. Empty string by default.\r\n *\r\n * @fires Transaction#begin\r\n * @fires Transaction#commit\r\n * @fires Transaction#rollback\r\n */\n\n\nclass Transaction extends EventEmitter {\n  /**\r\n   * Create new Transaction.\r\n   *\r\n   * @param {Connection} [parent] If ommited, global connection is used instead.\r\n   */\n  constructor(parent) {\n    super();\n    IDS.add(this, 'Transaction');\n    debug('transaction(%d): created', IDS.get(this));\n    this.parent = parent || globalConnection.pool;\n    this.isolationLevel = Transaction.defaultIsolationLevel;\n    this.name = '';\n  }\n\n  get connected() {\n    return this.parent.connected;\n  }\n  /**\r\n   * Acquire connection from connection pool.\r\n   *\r\n   * @param {Request} request Request.\r\n   * @param {ConnectionPool~acquireCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\r\n   * @return {Transaction|Promise}\r\n   */\n\n\n  acquire(request, callback) {\n    if (!this._acquiredConnection) {\n      setImmediate(callback, new TransactionError('Transaction has not begun. Call begin() first.', 'ENOTBEGUN'));\n      return this;\n    }\n\n    if (this._activeRequest) {\n      setImmediate(callback, new TransactionError(\"Can't acquire connection for the request. There is another request in progress.\", 'EREQINPROG'));\n      return this;\n    }\n\n    this._activeRequest = request;\n    setImmediate(callback, null, this._acquiredConnection, this._acquiredConfig);\n    return this;\n  }\n  /**\r\n   * Release connection back to the pool.\r\n   *\r\n   * @param {Connection} connection Previously acquired connection.\r\n   * @return {Transaction}\r\n   */\n\n\n  release(connection) {\n    if (connection === this._acquiredConnection) {\n      this._activeRequest = null;\n    }\n\n    return this;\n  }\n  /**\r\n   * Begin a transaction.\r\n   *\r\n   * @param {Number} [isolationLevel] Controls the locking and row versioning behavior of TSQL statements issued by a connection.\r\n   * @param {basicCallback} [callback] A callback which is called after transaction has began, or an error has occurred. If omited, method returns Promise.\r\n   * @return {Transaction|Promise}\r\n   */\n\n\n  begin(isolationLevel, callback) {\n    if (isolationLevel instanceof Function) {\n      callback = isolationLevel;\n      isolationLevel = undefined;\n    }\n\n    if (typeof callback === 'function') {\n      this._begin(isolationLevel, err => {\n        if (!err) {\n          this.emit('begin');\n        }\n\n        callback(err);\n      });\n\n      return this;\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._begin(isolationLevel, err => {\n        if (err) return reject(err);\n        this.emit('begin');\n        resolve(this);\n      });\n    });\n  }\n  /**\r\n   * @private\r\n   * @param {Number} [isolationLevel]\r\n   * @param {basicCallback} [callback]\r\n   * @return {Transaction}\r\n   */\n\n\n  _begin(isolationLevel, callback) {\n    if (this._acquiredConnection) {\n      return setImmediate(callback, new TransactionError('Transaction has already begun.', 'EALREADYBEGUN'));\n    }\n\n    this._aborted = false;\n    this._rollbackRequested = false;\n\n    if (isolationLevel) {\n      if (Object.keys(ISOLATION_LEVEL).some(key => {\n        return ISOLATION_LEVEL[key] === isolationLevel;\n      })) {\n        this.isolationLevel = isolationLevel;\n      } else {\n        throw new TransactionError('Invalid isolation level.');\n      }\n    }\n\n    setImmediate(callback);\n  }\n  /**\r\n   * Commit a transaction.\r\n   *\r\n   * @param {basicCallback} [callback] A callback which is called after transaction has commited, or an error has occurred. If omited, method returns Promise.\r\n   * @return {Transaction|Promise}\r\n   */\n\n\n  commit(callback) {\n    if (typeof callback === 'function') {\n      this._commit(err => {\n        if (!err) {\n          this.emit('commit');\n        }\n\n        callback(err);\n      });\n\n      return this;\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._commit(err => {\n        if (err) return reject(err);\n        this.emit('commit');\n        resolve();\n      });\n    });\n  }\n  /**\r\n   * @private\r\n   * @param {basicCallback} [callback]\r\n   * @return {Transaction}\r\n   */\n\n\n  _commit(callback) {\n    if (this._aborted) {\n      return setImmediate(callback, new TransactionError('Transaction has been aborted.', 'EABORT'));\n    }\n\n    if (!this._acquiredConnection) {\n      return setImmediate(callback, new TransactionError('Transaction has not begun. Call begin() first.', 'ENOTBEGUN'));\n    }\n\n    if (this._activeRequest) {\n      return setImmediate(callback, new TransactionError(\"Can't commit transaction. There is a request in progress.\", 'EREQINPROG'));\n    }\n\n    setImmediate(callback);\n  }\n  /**\r\n   * Returns new request using this transaction.\r\n   *\r\n   * @return {Request}\r\n   */\n\n\n  request() {\n    return new shared.driver.Request(this);\n  }\n  /**\r\n   * Rollback a transaction.\r\n   *\r\n   * @param {basicCallback} [callback] A callback which is called after transaction has rolled back, or an error has occurred. If omited, method returns Promise.\r\n   * @return {Transaction|Promise}\r\n   */\n\n\n  rollback(callback) {\n    if (typeof callback === 'function') {\n      this._rollback(err => {\n        if (!err) {\n          this.emit('rollback', this._aborted);\n        }\n\n        callback(err);\n      });\n\n      return this;\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      return this._rollback(err => {\n        if (err) return reject(err);\n        this.emit('rollback', this._aborted);\n        resolve();\n      });\n    });\n  }\n  /**\r\n   * @private\r\n   * @param {basicCallback} [callback]\r\n   * @return {Transaction}\r\n   */\n\n\n  _rollback(callback) {\n    if (this._aborted) {\n      return setImmediate(callback, new TransactionError('Transaction has been aborted.', 'EABORT'));\n    }\n\n    if (!this._acquiredConnection) {\n      return setImmediate(callback, new TransactionError('Transaction has not begun. Call begin() first.', 'ENOTBEGUN'));\n    }\n\n    if (this._activeRequest) {\n      return setImmediate(callback, new TransactionError(\"Can't rollback transaction. There is a request in progress.\", 'EREQINPROG'));\n    }\n\n    this._rollbackRequested = true;\n    setImmediate(callback);\n  }\n\n}\n/**\r\n * Default isolation level used for any transactions that don't explicitly specify an isolation level.\r\n *\r\n * @type {number}\r\n */\n\n\nTransaction.defaultIsolationLevel = ISOLATION_LEVEL.READ_COMMITTED;\nmodule.exports = Transaction;","map":{"version":3,"sources":["C:/Projects/sqlsample/node_modules/mssql/lib/base/transaction.js"],"names":["debug","require","EventEmitter","IDS","globalConnection","TransactionError","shared","ISOLATION_LEVEL","Transaction","constructor","parent","add","get","pool","isolationLevel","defaultIsolationLevel","name","connected","acquire","request","callback","_acquiredConnection","setImmediate","_activeRequest","_acquiredConfig","release","connection","begin","Function","undefined","_begin","err","emit","Promise","resolve","reject","_aborted","_rollbackRequested","Object","keys","some","key","commit","_commit","driver","Request","rollback","_rollback","READ_COMMITTED","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,YAAjB,CAAd;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAmBD,OAAO,CAAC,QAAD,CAAhC;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAUF,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMG,gBAAgB,GAAGH,OAAO,CAAC,sBAAD,CAAhC;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAuBJ,OAAO,CAAC,UAAD,CAApC;;AACA,MAAMK,MAAM,GAAGL,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAMM,eAAe,GAAGN,OAAO,CAAC,mBAAD,CAA/B;AAEA;;;;;;;;;;;;AAWA,MAAMO,WAAN,SAA0BN,YAA1B,CAAuC;AACrC;;;;;AAMAO,EAAAA,WAAW,CAAEC,MAAF,EAAU;AACnB;AAEAP,IAAAA,GAAG,CAACQ,GAAJ,CAAQ,IAAR,EAAc,aAAd;AACAX,IAAAA,KAAK,CAAC,0BAAD,EAA6BG,GAAG,CAACS,GAAJ,CAAQ,IAAR,CAA7B,CAAL;AAEA,SAAKF,MAAL,GAAcA,MAAM,IAAIN,gBAAgB,CAACS,IAAzC;AACA,SAAKC,cAAL,GAAsBN,WAAW,CAACO,qBAAlC;AACA,SAAKC,IAAL,GAAY,EAAZ;AACD;;AAED,MAAIC,SAAJ,GAAiB;AACf,WAAO,KAAKP,MAAL,CAAYO,SAAnB;AACD;AAED;;;;;;;;;AAQAC,EAAAA,OAAO,CAAEC,OAAF,EAAWC,QAAX,EAAqB;AAC1B,QAAI,CAAC,KAAKC,mBAAV,EAA+B;AAC7BC,MAAAA,YAAY,CAACF,QAAD,EAAW,IAAIf,gBAAJ,CAAqB,gDAArB,EAAuE,WAAvE,CAAX,CAAZ;AACA,aAAO,IAAP;AACD;;AAED,QAAI,KAAKkB,cAAT,EAAyB;AACvBD,MAAAA,YAAY,CAACF,QAAD,EAAW,IAAIf,gBAAJ,CAAqB,iFAArB,EAAwG,YAAxG,CAAX,CAAZ;AACA,aAAO,IAAP;AACD;;AAED,SAAKkB,cAAL,GAAsBJ,OAAtB;AACAG,IAAAA,YAAY,CAACF,QAAD,EAAW,IAAX,EAAiB,KAAKC,mBAAtB,EAA2C,KAAKG,eAAhD,CAAZ;AACA,WAAO,IAAP;AACD;AAED;;;;;;;;AAOAC,EAAAA,OAAO,CAAEC,UAAF,EAAc;AACnB,QAAIA,UAAU,KAAK,KAAKL,mBAAxB,EAA6C;AAC3C,WAAKE,cAAL,GAAsB,IAAtB;AACD;;AAED,WAAO,IAAP;AACD;AAED;;;;;;;;;AAQAI,EAAAA,KAAK,CAAEb,cAAF,EAAkBM,QAAlB,EAA4B;AAC/B,QAAIN,cAAc,YAAYc,QAA9B,EAAwC;AACtCR,MAAAA,QAAQ,GAAGN,cAAX;AACAA,MAAAA,cAAc,GAAGe,SAAjB;AACD;;AAED,QAAI,OAAOT,QAAP,KAAoB,UAAxB,EAAoC;AAClC,WAAKU,MAAL,CAAYhB,cAAZ,EAA4BiB,GAAG,IAAI;AACjC,YAAI,CAACA,GAAL,EAAU;AACR,eAAKC,IAAL,CAAU,OAAV;AACD;;AACDZ,QAAAA,QAAQ,CAACW,GAAD,CAAR;AACD,OALD;;AAMA,aAAO,IAAP;AACD;;AAED,WAAO,IAAIzB,MAAM,CAAC2B,OAAX,CAAmB,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7C,WAAKL,MAAL,CAAYhB,cAAZ,EAA4BiB,GAAG,IAAI;AACjC,YAAIA,GAAJ,EAAS,OAAOI,MAAM,CAACJ,GAAD,CAAb;AACT,aAAKC,IAAL,CAAU,OAAV;AACAE,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD,OAJD;AAKD,KANM,CAAP;AAOD;AAED;;;;;;;;AAOAJ,EAAAA,MAAM,CAAEhB,cAAF,EAAkBM,QAAlB,EAA4B;AAChC,QAAI,KAAKC,mBAAT,EAA8B;AAC5B,aAAOC,YAAY,CAACF,QAAD,EAAW,IAAIf,gBAAJ,CAAqB,gCAArB,EAAuD,eAAvD,CAAX,CAAnB;AACD;;AAED,SAAK+B,QAAL,GAAgB,KAAhB;AACA,SAAKC,kBAAL,GAA0B,KAA1B;;AACA,QAAIvB,cAAJ,EAAoB;AAClB,UAAIwB,MAAM,CAACC,IAAP,CAAYhC,eAAZ,EAA6BiC,IAA7B,CAAkCC,GAAG,IAAI;AAC3C,eAAOlC,eAAe,CAACkC,GAAD,CAAf,KAAyB3B,cAAhC;AACD,OAFG,CAAJ,EAEI;AACF,aAAKA,cAAL,GAAsBA,cAAtB;AACD,OAJD,MAIO;AACL,cAAM,IAAIT,gBAAJ,CAAqB,0BAArB,CAAN;AACD;AACF;;AAEDiB,IAAAA,YAAY,CAACF,QAAD,CAAZ;AACD;AAED;;;;;;;;AAOAsB,EAAAA,MAAM,CAAEtB,QAAF,EAAY;AAChB,QAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClC,WAAKuB,OAAL,CAAaZ,GAAG,IAAI;AAClB,YAAI,CAACA,GAAL,EAAU;AACR,eAAKC,IAAL,CAAU,QAAV;AACD;;AACDZ,QAAAA,QAAQ,CAACW,GAAD,CAAR;AACD,OALD;;AAMA,aAAO,IAAP;AACD;;AAED,WAAO,IAAIzB,MAAM,CAAC2B,OAAX,CAAmB,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7C,WAAKQ,OAAL,CAAaZ,GAAG,IAAI;AAClB,YAAIA,GAAJ,EAAS,OAAOI,MAAM,CAACJ,GAAD,CAAb;AACT,aAAKC,IAAL,CAAU,QAAV;AACAE,QAAAA,OAAO;AACR,OAJD;AAKD,KANM,CAAP;AAOD;AAED;;;;;;;AAMAS,EAAAA,OAAO,CAAEvB,QAAF,EAAY;AACjB,QAAI,KAAKgB,QAAT,EAAmB;AACjB,aAAOd,YAAY,CAACF,QAAD,EAAW,IAAIf,gBAAJ,CAAqB,+BAArB,EAAsD,QAAtD,CAAX,CAAnB;AACD;;AAED,QAAI,CAAC,KAAKgB,mBAAV,EAA+B;AAC7B,aAAOC,YAAY,CAACF,QAAD,EAAW,IAAIf,gBAAJ,CAAqB,gDAArB,EAAuE,WAAvE,CAAX,CAAnB;AACD;;AAED,QAAI,KAAKkB,cAAT,EAAyB;AACvB,aAAOD,YAAY,CAACF,QAAD,EAAW,IAAIf,gBAAJ,CAAqB,2DAArB,EAAkF,YAAlF,CAAX,CAAnB;AACD;;AAEDiB,IAAAA,YAAY,CAACF,QAAD,CAAZ;AACD;AAED;;;;;;;AAMAD,EAAAA,OAAO,GAAI;AACT,WAAO,IAAIb,MAAM,CAACsC,MAAP,CAAcC,OAAlB,CAA0B,IAA1B,CAAP;AACD;AAED;;;;;;;;AAOAC,EAAAA,QAAQ,CAAE1B,QAAF,EAAY;AAClB,QAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClC,WAAK2B,SAAL,CAAehB,GAAG,IAAI;AACpB,YAAI,CAACA,GAAL,EAAU;AACR,eAAKC,IAAL,CAAU,UAAV,EAAsB,KAAKI,QAA3B;AACD;;AACDhB,QAAAA,QAAQ,CAACW,GAAD,CAAR;AACD,OALD;;AAMA,aAAO,IAAP;AACD;;AAED,WAAO,IAAIzB,MAAM,CAAC2B,OAAX,CAAmB,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7C,aAAO,KAAKY,SAAL,CAAehB,GAAG,IAAI;AAC3B,YAAIA,GAAJ,EAAS,OAAOI,MAAM,CAACJ,GAAD,CAAb;AACT,aAAKC,IAAL,CAAU,UAAV,EAAsB,KAAKI,QAA3B;AACAF,QAAAA,OAAO;AACR,OAJM,CAAP;AAKD,KANM,CAAP;AAOD;AAED;;;;;;;AAMAa,EAAAA,SAAS,CAAE3B,QAAF,EAAY;AACnB,QAAI,KAAKgB,QAAT,EAAmB;AACjB,aAAOd,YAAY,CAACF,QAAD,EAAW,IAAIf,gBAAJ,CAAqB,+BAArB,EAAsD,QAAtD,CAAX,CAAnB;AACD;;AAED,QAAI,CAAC,KAAKgB,mBAAV,EAA+B;AAC7B,aAAOC,YAAY,CAACF,QAAD,EAAW,IAAIf,gBAAJ,CAAqB,gDAArB,EAAuE,WAAvE,CAAX,CAAnB;AACD;;AAED,QAAI,KAAKkB,cAAT,EAAyB;AACvB,aAAOD,YAAY,CAACF,QAAD,EAAW,IAAIf,gBAAJ,CAAqB,6DAArB,EAAoF,YAApF,CAAX,CAAnB;AACD;;AAED,SAAKgC,kBAAL,GAA0B,IAA1B;AAEAf,IAAAA,YAAY,CAACF,QAAD,CAAZ;AACD;;AArOoC;AAwOvC;;;;;;;AAKAZ,WAAW,CAACO,qBAAZ,GAAoCR,eAAe,CAACyC,cAApD;AAEAC,MAAM,CAACC,OAAP,GAAiB1C,WAAjB","sourcesContent":["'use strict'\r\n\r\nconst debug = require('debug')('mssql:base')\r\nconst { EventEmitter } = require('events')\r\nconst { IDS } = require('../utils')\r\nconst globalConnection = require('../global-connection')\r\nconst { TransactionError } = require('../error')\r\nconst shared = require('../shared')\r\nconst ISOLATION_LEVEL = require('../isolationlevel')\r\n\r\n/**\r\n * Class Transaction.\r\n *\r\n * @property {Number} isolationLevel Controls the locking and row versioning behavior of TSQL statements issued by a connection. READ_COMMITTED by default.\r\n * @property {String} name Transaction name. Empty string by default.\r\n *\r\n * @fires Transaction#begin\r\n * @fires Transaction#commit\r\n * @fires Transaction#rollback\r\n */\r\n\r\nclass Transaction extends EventEmitter {\r\n  /**\r\n   * Create new Transaction.\r\n   *\r\n   * @param {Connection} [parent] If ommited, global connection is used instead.\r\n   */\r\n\r\n  constructor (parent) {\r\n    super()\r\n\r\n    IDS.add(this, 'Transaction')\r\n    debug('transaction(%d): created', IDS.get(this))\r\n\r\n    this.parent = parent || globalConnection.pool\r\n    this.isolationLevel = Transaction.defaultIsolationLevel\r\n    this.name = ''\r\n  }\r\n\r\n  get connected () {\r\n    return this.parent.connected\r\n  }\r\n\r\n  /**\r\n   * Acquire connection from connection pool.\r\n   *\r\n   * @param {Request} request Request.\r\n   * @param {ConnectionPool~acquireCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\r\n   * @return {Transaction|Promise}\r\n   */\r\n\r\n  acquire (request, callback) {\r\n    if (!this._acquiredConnection) {\r\n      setImmediate(callback, new TransactionError('Transaction has not begun. Call begin() first.', 'ENOTBEGUN'))\r\n      return this\r\n    }\r\n\r\n    if (this._activeRequest) {\r\n      setImmediate(callback, new TransactionError(\"Can't acquire connection for the request. There is another request in progress.\", 'EREQINPROG'))\r\n      return this\r\n    }\r\n\r\n    this._activeRequest = request\r\n    setImmediate(callback, null, this._acquiredConnection, this._acquiredConfig)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Release connection back to the pool.\r\n   *\r\n   * @param {Connection} connection Previously acquired connection.\r\n   * @return {Transaction}\r\n   */\r\n\r\n  release (connection) {\r\n    if (connection === this._acquiredConnection) {\r\n      this._activeRequest = null\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Begin a transaction.\r\n   *\r\n   * @param {Number} [isolationLevel] Controls the locking and row versioning behavior of TSQL statements issued by a connection.\r\n   * @param {basicCallback} [callback] A callback which is called after transaction has began, or an error has occurred. If omited, method returns Promise.\r\n   * @return {Transaction|Promise}\r\n   */\r\n\r\n  begin (isolationLevel, callback) {\r\n    if (isolationLevel instanceof Function) {\r\n      callback = isolationLevel\r\n      isolationLevel = undefined\r\n    }\r\n\r\n    if (typeof callback === 'function') {\r\n      this._begin(isolationLevel, err => {\r\n        if (!err) {\r\n          this.emit('begin')\r\n        }\r\n        callback(err)\r\n      })\r\n      return this\r\n    }\r\n\r\n    return new shared.Promise((resolve, reject) => {\r\n      this._begin(isolationLevel, err => {\r\n        if (err) return reject(err)\r\n        this.emit('begin')\r\n        resolve(this)\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Number} [isolationLevel]\r\n   * @param {basicCallback} [callback]\r\n   * @return {Transaction}\r\n   */\r\n\r\n  _begin (isolationLevel, callback) {\r\n    if (this._acquiredConnection) {\r\n      return setImmediate(callback, new TransactionError('Transaction has already begun.', 'EALREADYBEGUN'))\r\n    }\r\n\r\n    this._aborted = false\r\n    this._rollbackRequested = false\r\n    if (isolationLevel) {\r\n      if (Object.keys(ISOLATION_LEVEL).some(key => {\r\n        return ISOLATION_LEVEL[key] === isolationLevel\r\n      })) {\r\n        this.isolationLevel = isolationLevel\r\n      } else {\r\n        throw new TransactionError('Invalid isolation level.')\r\n      }\r\n    }\r\n\r\n    setImmediate(callback)\r\n  }\r\n\r\n  /**\r\n   * Commit a transaction.\r\n   *\r\n   * @param {basicCallback} [callback] A callback which is called after transaction has commited, or an error has occurred. If omited, method returns Promise.\r\n   * @return {Transaction|Promise}\r\n   */\r\n\r\n  commit (callback) {\r\n    if (typeof callback === 'function') {\r\n      this._commit(err => {\r\n        if (!err) {\r\n          this.emit('commit')\r\n        }\r\n        callback(err)\r\n      })\r\n      return this\r\n    }\r\n\r\n    return new shared.Promise((resolve, reject) => {\r\n      this._commit(err => {\r\n        if (err) return reject(err)\r\n        this.emit('commit')\r\n        resolve()\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {basicCallback} [callback]\r\n   * @return {Transaction}\r\n   */\r\n\r\n  _commit (callback) {\r\n    if (this._aborted) {\r\n      return setImmediate(callback, new TransactionError('Transaction has been aborted.', 'EABORT'))\r\n    }\r\n\r\n    if (!this._acquiredConnection) {\r\n      return setImmediate(callback, new TransactionError('Transaction has not begun. Call begin() first.', 'ENOTBEGUN'))\r\n    }\r\n\r\n    if (this._activeRequest) {\r\n      return setImmediate(callback, new TransactionError(\"Can't commit transaction. There is a request in progress.\", 'EREQINPROG'))\r\n    }\r\n\r\n    setImmediate(callback)\r\n  }\r\n\r\n  /**\r\n   * Returns new request using this transaction.\r\n   *\r\n   * @return {Request}\r\n   */\r\n\r\n  request () {\r\n    return new shared.driver.Request(this)\r\n  }\r\n\r\n  /**\r\n   * Rollback a transaction.\r\n   *\r\n   * @param {basicCallback} [callback] A callback which is called after transaction has rolled back, or an error has occurred. If omited, method returns Promise.\r\n   * @return {Transaction|Promise}\r\n   */\r\n\r\n  rollback (callback) {\r\n    if (typeof callback === 'function') {\r\n      this._rollback(err => {\r\n        if (!err) {\r\n          this.emit('rollback', this._aborted)\r\n        }\r\n        callback(err)\r\n      })\r\n      return this\r\n    }\r\n\r\n    return new shared.Promise((resolve, reject) => {\r\n      return this._rollback(err => {\r\n        if (err) return reject(err)\r\n        this.emit('rollback', this._aborted)\r\n        resolve()\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {basicCallback} [callback]\r\n   * @return {Transaction}\r\n   */\r\n\r\n  _rollback (callback) {\r\n    if (this._aborted) {\r\n      return setImmediate(callback, new TransactionError('Transaction has been aborted.', 'EABORT'))\r\n    }\r\n\r\n    if (!this._acquiredConnection) {\r\n      return setImmediate(callback, new TransactionError('Transaction has not begun. Call begin() first.', 'ENOTBEGUN'))\r\n    }\r\n\r\n    if (this._activeRequest) {\r\n      return setImmediate(callback, new TransactionError(\"Can't rollback transaction. There is a request in progress.\", 'EREQINPROG'))\r\n    }\r\n\r\n    this._rollbackRequested = true\r\n\r\n    setImmediate(callback)\r\n  }\r\n}\r\n\r\n/**\r\n * Default isolation level used for any transactions that don't explicitly specify an isolation level.\r\n *\r\n * @type {number}\r\n */\r\nTransaction.defaultIsolationLevel = ISOLATION_LEVEL.READ_COMMITTED\r\n\r\nmodule.exports = Transaction\r\n"]},"metadata":{},"sourceType":"script"}