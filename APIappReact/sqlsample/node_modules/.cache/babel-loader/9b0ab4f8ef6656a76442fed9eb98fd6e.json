{"ast":null,"code":"'use strict';\n\nconst debug = require('debug')('mssql:tedi');\n\nconst BaseTransaction = require('../base/transaction');\n\nconst {\n  IDS\n} = require('../utils');\n\nconst TransactionError = require('../error/transaction-error');\n\nclass Transaction extends BaseTransaction {\n  constructor(parent) {\n    super(parent);\n\n    this._abort = () => {\n      if (!this._rollbackRequested) {\n        // transaction interrupted because of XACT_ABORT\n        const pc = this._acquiredConnection; // defer releasing so connection can switch from SentClientRequest to LoggedIn state\n\n        setImmediate(this.parent.release.bind(this.parent), pc);\n\n        this._acquiredConnection.removeListener('rollbackTransaction', this._abort);\n\n        this._acquiredConnection = null;\n        this._acquiredConfig = null;\n        this._aborted = true;\n        this.emit('rollback', true);\n      }\n    };\n  }\n\n  _begin(isolationLevel, callback) {\n    super._begin(isolationLevel, err => {\n      if (err) return callback(err);\n      debug('transaction(%d): begin', IDS.get(this));\n      this.parent.acquire(this, (err, connection, config) => {\n        if (err) return callback(err);\n        this._acquiredConnection = connection;\n\n        this._acquiredConnection.on('rollbackTransaction', this._abort);\n\n        this._acquiredConfig = config;\n        connection.beginTransaction(err => {\n          if (err) err = new TransactionError(err);\n          debug('transaction(%d): begun', IDS.get(this));\n          callback(err);\n        }, this.name, this.isolationLevel);\n      });\n    });\n  }\n\n  _commit(callback) {\n    super._commit(err => {\n      if (err) return callback(err);\n      debug('transaction(%d): commit', IDS.get(this));\n\n      this._acquiredConnection.commitTransaction(err => {\n        if (err) err = new TransactionError(err);\n\n        this._acquiredConnection.removeListener('rollbackTransaction', this._abort);\n\n        this.parent.release(this._acquiredConnection);\n        this._acquiredConnection = null;\n        this._acquiredConfig = null;\n        if (!err) debug('transaction(%d): commited', IDS.get(this));\n        callback(err);\n      });\n    });\n  }\n\n  _rollback(callback) {\n    super._rollback(err => {\n      if (err) return callback(err);\n      debug('transaction(%d): rollback', IDS.get(this));\n\n      this._acquiredConnection.rollbackTransaction(err => {\n        if (err) err = new TransactionError(err);\n\n        this._acquiredConnection.removeListener('rollbackTransaction', this._abort);\n\n        this.parent.release(this._acquiredConnection);\n        this._acquiredConnection = null;\n        this._acquiredConfig = null;\n        if (!err) debug('transaction(%d): rolled back', IDS.get(this));\n        callback(err);\n      });\n    });\n  }\n\n}\n\nmodule.exports = Transaction;","map":{"version":3,"sources":["C:/Projects/sqlsample/node_modules/mssql/lib/tedious/transaction.js"],"names":["debug","require","BaseTransaction","IDS","TransactionError","Transaction","constructor","parent","_abort","_rollbackRequested","pc","_acquiredConnection","setImmediate","release","bind","removeListener","_acquiredConfig","_aborted","emit","_begin","isolationLevel","callback","err","get","acquire","connection","config","on","beginTransaction","name","_commit","commitTransaction","_rollback","rollbackTransaction","module","exports"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nconst debug = require('debug')('mssql:tedi')\r\nconst BaseTransaction = require('../base/transaction')\r\nconst { IDS } = require('../utils')\r\nconst TransactionError = require('../error/transaction-error')\r\n\r\nclass Transaction extends BaseTransaction {\r\n  constructor (parent) {\r\n    super(parent)\r\n\r\n    this._abort = () => {\r\n      if (!this._rollbackRequested) {\r\n        // transaction interrupted because of XACT_ABORT\r\n\r\n        const pc = this._acquiredConnection\r\n\r\n        // defer releasing so connection can switch from SentClientRequest to LoggedIn state\r\n        setImmediate(this.parent.release.bind(this.parent), pc)\r\n\r\n        this._acquiredConnection.removeListener('rollbackTransaction', this._abort)\r\n        this._acquiredConnection = null\r\n        this._acquiredConfig = null\r\n        this._aborted = true\r\n\r\n        this.emit('rollback', true)\r\n      }\r\n    }\r\n  }\r\n\r\n  _begin (isolationLevel, callback) {\r\n    super._begin(isolationLevel, err => {\r\n      if (err) return callback(err)\r\n\r\n      debug('transaction(%d): begin', IDS.get(this))\r\n\r\n      this.parent.acquire(this, (err, connection, config) => {\r\n        if (err) return callback(err)\r\n\r\n        this._acquiredConnection = connection\r\n        this._acquiredConnection.on('rollbackTransaction', this._abort)\r\n        this._acquiredConfig = config\r\n\r\n        connection.beginTransaction(err => {\r\n          if (err) err = new TransactionError(err)\r\n\r\n          debug('transaction(%d): begun', IDS.get(this))\r\n\r\n          callback(err)\r\n        }, this.name, this.isolationLevel)\r\n      })\r\n    })\r\n  }\r\n\r\n  _commit (callback) {\r\n    super._commit(err => {\r\n      if (err) return callback(err)\r\n\r\n      debug('transaction(%d): commit', IDS.get(this))\r\n\r\n      this._acquiredConnection.commitTransaction(err => {\r\n        if (err) err = new TransactionError(err)\r\n\r\n        this._acquiredConnection.removeListener('rollbackTransaction', this._abort)\r\n        this.parent.release(this._acquiredConnection)\r\n        this._acquiredConnection = null\r\n        this._acquiredConfig = null\r\n\r\n        if (!err) debug('transaction(%d): commited', IDS.get(this))\r\n\r\n        callback(err)\r\n      })\r\n    })\r\n  }\r\n\r\n  _rollback (callback) {\r\n    super._rollback(err => {\r\n      if (err) return callback(err)\r\n\r\n      debug('transaction(%d): rollback', IDS.get(this))\r\n\r\n      this._acquiredConnection.rollbackTransaction(err => {\r\n        if (err) err = new TransactionError(err)\r\n\r\n        this._acquiredConnection.removeListener('rollbackTransaction', this._abort)\r\n        this.parent.release(this._acquiredConnection)\r\n        this._acquiredConnection = null\r\n        this._acquiredConfig = null\r\n\r\n        if (!err) debug('transaction(%d): rolled back', IDS.get(this))\r\n\r\n        callback(err)\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = Transaction\r\n"]},"metadata":{},"sourceType":"script"}